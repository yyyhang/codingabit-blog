[{
  "section": "Blog",
  "slug": "/blog/post-2/",
  "title": "Connect to your server via SSH: A Guide to SSH and Public Key Authentication",
  "description": "this is meta description",
  "date": "July 7, 2023",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/ssh1_hu248e80008b91156d6df342903c376460_2705154_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"240\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/ssh1_hu248e80008b91156d6df342903c376460_2705154_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/ssh1_hu248e80008b91156d6df342903c376460_2705154_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/ssh1_hu248e80008b91156d6df342903c376460_2705154_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Internet, Cloud",
  "tags": "technology, ssh",
  "content":"Introduction Secure Shell (SSH) is an indispensable cryptographic protocol designed to facilitate secure communications over an untrusted network. Widely adopted for tasks such as remote server administration, secure file transfers, and various other network services, SSH is a cornerstone of modern cybersecurity. One of its most compelling features is the use of cryptographic key pairs for authentication, offering a far more secure alternative to traditional password-based logins. This blog post serves as a comprehensive guide to setting up and optimizing SSH with public key authentication.\nChecking and Installing SSH on Your Machine: A Prerequisite for Security Before you can embark on the journey of secure and efficient remote server management, it\u0026rsquo;s imperative to ensure that SSH is installed on both your local and remote machines. Here\u0026rsquo;s how you can verify its presence and install it if necessary:\nVerifying SSH Installation On UNIX-based Systems (Linux/Mac):\nLaunch a terminal window. Execute the command which ssh. If SSH is installed, the terminal will return the installation path. If not, there will be no output. On Windows:\nOpen either PowerShell or Command Prompt. Input ssh and hit Enter. If SSH is installed, usage instructions will appear. Otherwise, an error message will be displayed. Installation Guide On Linux:\nOpen a terminal. Update the package lists with sudo apt update. Install SSH using sudo apt install openssh-server. On Windows:\nNavigate to Settings \u0026gt; Apps \u0026gt; Optional Features. Scroll down and select \u0026ldquo;Add a feature.\u0026rdquo; Search for \u0026ldquo;SSH Client\u0026rdquo; and click on \u0026ldquo;Install.\u0026rdquo; Note: SSH comes pre-installed on macOS, eliminating the need for separate installation.\nDisabling Password Authentication: A Security Imperative Before delving into the realm of key-based authentication, it\u0026rsquo;s crucial to comprehend the vulnerabilities associated with password-based logins, such as susceptibility to brute-force attacks and phishing schemes. To fortify your server against these threats, disabling password authentication is advisable.\nSteps to Disable Password Authentication Access the SSH configuration file using vim /etc/ssh/sshd_config. Locate the PasswordAuthentication parameter and set it to no. Advantages and Risks\nAdvantages:\nEnhanced resilience against brute-force attacks. Minimized risk of unauthorized access. Risks:\nLosing your private key will result in losing access to the server. Configuring SSH: Tailoring Your Security The SSH configuration file, commonly known as ssh_config, offers a plethora of settings that can be customized to streamline the login process and bolster security measures.\nTips for Configuration Specify the IdentityFile to direct SSH to your private key, especially useful when managing multiple keys. Include IdentitiesOnly yes to restrict SSH connections to use only the designated identity file. Uploading the Public Key: A Step-by-Step Guide After generating your SSH key pair, the subsequent step involves uploading your public key to the server. This can be accomplished manually with a series of straightforward commands.\nCommands for Uploading Public Key Display your public key with cat ~/.ssh/id_rsa.pub. Log into your server and execute the following commands: mkdir -p ~/.ssh \u0026amp;\u0026amp; touch ~/.ssh/authorized_keys Set the appropriate permissions: chmod 700 ~/.ssh \u0026amp;\u0026amp; chmod 600 ~/.ssh/authorized_keys Append your public key to the server\u0026rsquo;s authorized_keys file. Managing Private Key Permissions: A Security Must-Have Incorrect permissions on your private key file can be a gaping security hole. It\u0026rsquo;s imperative to set the correct permissions to mitigate this risk.\nHow to Set Permissions On Linux:\nUse sudo chmod 600 private_key_location.\nOn Windows 10:\nRight-click on the key file, navigate to Properties \u0026gt; Security \u0026gt; Advanced \u0026gt; Disable Inheritance \u0026gt; Convert. Remove all users except the owner of the key.\nGenerating a Robust SSH Key Pair on Linux To generate a secure SSH key pair on Linux, use the following command: ssh-keygen -t rsa -b 2048\nThis command will produce a 2048-bit RSA key pair, providing a high level of security.\nSpecifying an SSH Port: Flexibility and Security SSH typically operates on port 22, but you have the flexibility to specify a different port if required.\nCommand to Specify Port Use ssh username@server_name_or_IPaddr -p port_number to connect.\nCustomizing the SSH Configuration File: Advanced Security Measures For those looking to further enhance security, the SSH configuration file can be modified to disable all password-based authentication.\nCommands for Customization Open the SSH configuration file with vim /etc/ssh/sshd_config.\nChange PermitRootLogin yes to PermitRootLogin prohibit-password.\nUtilizing AWS-Generated Key Pairs: A Convenient Option If you\u0026rsquo;re an AWS user, the platform will automatically generate a .pem key file for you. All you need to do is adjust the permissions of the key file and use it like any standard private key.\nConclusion Mastering SSH and public key authentication is indispensable for anyone engaged in server management or secure communications. By understanding how to disable password-based authentication, fine-tune SSH configurations, manage key permissions, and leverage AWS-generated keys, you can significantly elevate the security and efficiency of your operations.\n"},{
  "section": "Blog",
  "slug": "/blog/post-1/",
  "title": "Understanding Distributed Systems: An Introductory Guide",
  "description": "this is meta description",
  "date": "July 1, 2023",
  "image": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/interconnected_computers_hub17e0680a8491c45f53e74a1d584867a_2242672_420x0_resize_q90_h2_lanczos_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"240\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/interconnected_computers_hub17e0680a8491c45f53e74a1d584867a_2242672_420x0_resize_lanczos_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "imageSM": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog/interconnected_computers_hub17e0680a8491c45f53e74a1d584867a_2242672_100x100_fill_q90_h2_lanczos_smart1_3.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog\\/interconnected_computers_hub17e0680a8491c45f53e74a1d584867a_2242672_100x100_fill_lanczos_smart1_3.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n",
  "searchKeyword": "",
  "categories": "Cloud, Distributed Systems",
  "tags": "Transparency, Scalability, Dependability, Performance, Flexibility",
  "content":"Introduction In the realm of computing, the term \u0026ldquo;Distributed Systems\u0026rdquo; often surfaces as a critical area of study and application. But what does it mean, and why is it so crucial in today\u0026rsquo;s tech landscape? This blog post aims to provide an in-depth understanding of distributed systems.\nWhat is a Distributed System? At its core, a distributed system is a collection of independent computers that collaborate to perform a unified task or deliver a single service. The ideal scenario is one where these multiple components are entirely transparent to the user, appearing as a single, coherent system. This seamless interaction is what makes distributed systems so fascinating and complex to study.\nDefinitions to Know Distributed System: A collection of independent computers that work in unison to perform a single task or provide a single service. The Five Pillars: Key Goals of Distributed Systems Transparency\nTransparency is the art of making the complex appear simple. In the context of distributed systems, it means hiding the separation of components so that the user sees a single, unified system.\nTypes of Transparency:\nAccess Transparency: Whether local or remote, all resources are accessed in the same manner. Location Transparency: The user remains unaware of where the resources are located. Migration Transparency: Resources can move or migrate without any change in their names. Replication Transparency: Multiple copies of resources exist, but the user is unaware of this. Failure Transparency: The system hides the failure of individual components from the user. Concurrency Transparency: Users are unaware that resources are shared with others. Scalability\nScalability is the system\u0026rsquo;s ability to grow and manage increased demand effectively. A scalable system can handle the addition of users and resources without a noticeable loss of performance.\nDimensions of Scalability:\nSize Scalability: As the number of users or resources increases, the system should not become overloaded. Geographic Scalability: The system should effectively manage increased distances between nodes. Administrative Scalability: As the system grows, the administrative complexity should not increase exponentially. Dependability\nDependability in a distributed system involves three key aspects:\nConsistency: All nodes in the system should have a consistent view of the data. Security: The system should protect against unauthorized access and attacks. Fault Tolerance: The system should continue to function even when some of its components fail. Performance\nAchieving high performance in a distributed system is a challenging task because it often conflicts with other goals like transparency and security.\nFlexibility\nFlexibility in a distributed system refers to its ability to adapt to changing requirements and conditions.\nDesign Principles for Scalability When designing a scalable distributed system, certain principles can guide you:\nDecentralization: Avoid any form of centralization as it can lead to performance bottlenecks. Local Decision-making: Nodes should make decisions based on local, not global, information. Survivability: Algorithms should be designed to continue functioning even if some nodes fail. No Global Clock: The system should operate without the need for a synchronized global clock. Software Architectures: The Building Blocks Multicomputers\nA multicomputer is a system consisting of multiple computing nodes connected over a network. These can differ in terms of resources, network connections, and homogeneity.\nDistributed Operating Systems (DOS)\nA Distributed Operating System is designed from the ground up to support distributed services. It aims for a high level of transparency and usually assumes a homogeneous multicomputer environment.\nCommon Pitfalls: Mistakes to Avoid in Developing Distributed Systems Network Reliability: Never assume that the network is 100% reliable. Zero Latency: Data transfer delays are a reality; they can\u0026rsquo;t be ignored. Infinite Bandwidth: Bandwidth is a finite resource; manage it wisely. Network Security: Always incorporate security measures; no network is entirely secure. Static Topology: Network configurations change; your system should be adaptable. Conclusion Understanding distributed systems is not just an academic exercise; it\u0026rsquo;s a necessity for anyone involved in the development or management of complex computer systems. By being aware of the key challenges, goals, and principles, we can aspire to build systems that are robust, scalable, and efficient.\n"}]
